# üõ°Ô∏è HARDENED Docker Compose Configuration
# üö® SECURITY-FIRST: Addresses 30+ critical vulnerabilities
# üìã PCI DSS Compliant: Network segmentation and access controls

version: '3.8'

services:
  # üåê Frontend Service - DMZ Tier
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.secure
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.trancendos-ecosystem.com
    networks:
      - frontend-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    depends_on:
      - backend-java
      - backend-python
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ‚òï Java Backend - Application Tier
  backend-java:
    build:
      context: ./backend/java
      dockerfile: Dockerfile.secure
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - DATABASE_URL=jdbc:postgresql://postgres:5432/trancendos
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - ENCRYPTION_KEY_FILE=/run/secrets/encryption_key
    secrets:
      - jwt_secret
      - encryption_key
    networks:
      - backend-network
      - database-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üêç Python Backend - AI/ML Tier
  backend-python:
    build:
      context: ./backend/python
      dockerfile: Dockerfile.secure
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:5432/trancendos_ai
      - REDIS_URL=redis://redis:6379
    secrets:
      - ml_model_key
      - api_encryption_key
    networks:
      - backend-network
      - database-network
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'
        reservations:
          memory: 768M
          cpus: '0.75'
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üìã PostgreSQL Database - Data Tier (SECURED)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: trancendos
      POSTGRES_USER: trancendos
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - database-network
    # üö® SECURITY: NO EXTERNAL PORTS EXPOSED
    expose:
      - "5432"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trancendos -d trancendos"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üî¥ Redis Cache - Data Tier (SECURED)
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --requirepass "$$(cat /run/secrets/redis_password)"
      --appendonly yes
      --save 60 1
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    secrets:
      - redis_password
    volumes:
      - redis_data:/data:Z
    networks:
      - database-network
    # üö® SECURITY: NO EXTERNAL PORTS EXPOSED
    expose:
      - "6379"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.75'
        reservations:
          memory: 384M
          cpus: '0.25'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üìã Prometheus - Monitoring Tier (SECURED)
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus-secure.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://prometheus.trancendos-ecosystem.com'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus:Z
    networks:
      - monitoring-network
      - backend-network
    # üö® SECURITY: NO DIRECT EXTERNAL ACCESS
    expose:
      - "9090"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped
    user: "65534:65534"  # nobody user
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üìà Grafana - Monitoring Tier (SECURED)
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
      - GF_SECURITY_SECRET_KEY__FILE=/run/secrets/grafana_secret
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/ssl/certs/grafana.crt
      - GF_SERVER_CERT_KEY=/etc/ssl/certs/grafana.key
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    secrets:
      - grafana_password
      - grafana_secret
    volumes:
      - grafana_data:/var/lib/grafana:Z
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
      - ./ssl:/etc/ssl/certs:ro
    networks:
      - monitoring-network
    expose:
      - "3000"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/grafana
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 384M
          cpus: '0.25'
    restart: unless-stopped
    user: "472:472"  # grafana user
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üåê Nginx Reverse Proxy - DMZ Tier (HTTPS ONLY)
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      # üö® SECURITY: HTTP PORT 80 COMPLETELY DISABLED
    volumes:
      - ./nginx/nginx-secure.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_cache:/var/cache/nginx:Z
    networks:
      - frontend-network
      - monitoring-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run
      - /var/log/nginx
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    depends_on:
      - frontend
      - backend-java
      - backend-python
      - grafana
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "https://localhost:443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # üõ°Ô∏è Security Monitor - Falco
  security-monitor:
    image: falcosecurity/falco:latest
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /dev:/host/dev:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - ./security/falco-rules.yaml:/etc/falco/falco_rules.local.yaml:ro
    networks:
      - monitoring-network
    command:
      - /usr/bin/falco
      - --modern-bpf
      - --cri
      - /var/run/docker.sock
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# üîê DOCKER SECRETS - Secure Credential Management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  encryption_key:
    file: ./secrets/encryption_key.txt
  ml_model_key:
    file: ./secrets/ml_model_key.txt
  api_encryption_key:
    file: ./secrets/api_encryption_key.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  grafana_secret:
    file: ./secrets/grafana_secret.txt

# üìè PERSISTENT VOLUMES
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/trancendos/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/trancendos/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/trancendos/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/trancendos/grafana
  nginx_cache:
    driver: local

# üåê NETWORK SEGMENTATION - Multi-Tier Architecture
networks:
  # DMZ - Internet-facing services
  frontend-network:
    driver: bridge
    internal: false
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: trancendos-dmz
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"

  # Application Tier - Backend services
  backend-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.name: trancendos-app
      com.docker.network.bridge.enable_icc: "true"

  # Data Tier - Database services (Most Restricted)
  database-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/24
          gateway: 172.22.0.1
    driver_opts:
      com.docker.network.bridge.name: trancendos-data
      com.docker.network.bridge.enable_icc: "true"

  # Monitoring Tier - Observability services
  monitoring-network:
    driver: bridge
    internal: false
    ipam:
      driver: default
      config:
        - subnet: 172.23.0.0/24
          gateway: 172.23.0.1
    driver_opts:
      com.docker.network.bridge.name: trancendos-monitor
      com.docker.network.bridge.enable_icc: "true"
